/*
 * Project YouTwo-V4LED_I2C_Lidar
 * Description: Program to test the Garmin Lidar Distance Sensor
 * Author:      Ivan Boyd
 * Date:        11/29/21
 */

/*------------------------------------------------------------------------------
  SDA, pin 0  Yellow wire   LIDAR-Lite I2C SDA 
  SCL, pin 1  Green wire    LIDAR-Lite I2C SCL 

  Optional connections to utilize GPIO triggering:
  D5, pin 5   White wire    LIDAR-Lite GPIOA   (pin 5) to Arduino Digital 2
  D6, pin 6   Blue wire     LIDAR-Lite GPIOB   (pin 6) to Arduino Digital 3

  (Capacitor recommended to mitigate inrush current when device is enabled)
  680uF capacitor (+) to Arduino 5V
  680uF capacitor (-) to Arduino GND

  See the Operation Manual for wiring diagrams and more information

------------------------------------------------------------------------------*/
#include "Wire.h"
#include "LIDARLite_v4LED.h"

LIDARLite_v4LED myLidarLite;
uint8_t  newDistance;
uint16_t distance;
#define FAST_I2C

#define MonitorPin    SDA         // 3
#define TriggerPin    SCL         // 2

enum rangeType_T
{
    RANGE_NONE,
    RANGE_SINGLE,
    RANGE_CONTINUOUS,
    RANGE_SINGLE_GPIO,
    RANGE_CONTINUOUS_GPIO
};
SYSTEM_MODE(SEMI_AUTOMATIC); //Using BLE and not Wifi

void setup()
{
    Serial.begin(9600);
    Wire.begin();            // Initialize  I2C (for communication to LidarLite)
}

void loop()       {
  newDistance = distanceSingle(&distance);
  if (newDistance) {
    Serial.println(distance);
  }
  delay(500);
}


//---------------------------------------------------------------------
// Read Single Distance Measurement
//
// This is the simplest form of taking a measurement. This is a
// blocking function as it will not return until a range has been
// taken and a new distance measurement can be read.
//---------------------------------------------------------------------
uint8_t distanceSingle(uint16_t * distance)
{
    myLidarLite.takeRange();                  // 1. Trigger range measurement.
    myLidarLite.waitForBusy();                // 2. Wait for busyFlag to indicate device is idle.
    *distance = myLidarLite.readDistance();   // 3. Read new distance data from device registers
    return 1;
}

//---------------------------------------------------------------------
// Read Single Distance Measurement using Trigger / Monitor Pins
//
// This is the simplest form of taking a measurement. This is a
// blocking function as it will not return until a range has been
// taken and a new distance measurement can be read. Instead of using
// the STATUS register to poll for BUSY, this function uses a
// GPIO pin on the LIDAR-Lite to monitor the BUSY flag.
//---------------------------------------------------------------------


//---------------------------------------------------------------------
// Print the correlation record for analysis
//---------------------------------------------------------------------
void dumpCorrelationRecord()
{
    int16_t corrValues[192];
    uint8_t i;

    myLidarLite.correlationRecordRead(corrValues);

    for (i=0 ; i<192 ; i++)
    {
        Serial.print(corrValues[i], DEC);
        Serial.print(",");
    }
    Serial.println(" ");
}

//---------------------------------------------------------------------
void VersionPrint(void)
//---------------------------------------------------------------------
{
    uint8_t    dataBytes[12];
    uint8_t  * nrfVerString;
    uint16_t * lrfVersion;
    uint8_t  * hwVersion;
    uint8_t  i;

    //===========================================
    // Print nRF Software Version
    //===========================================
    myLidarLite.read(0x30, dataBytes, 11, 0x62);
    nrfVerString = dataBytes;
    Serial.print("nRF Software Version  - ");
    for (i=0 ; i<11 ; i++)
    {
      Serial.write(nrfVerString[i]);
    }
    Serial.println("");

    //===========================================
    // Print LRF Firmware Version
    //===========================================
    myLidarLite.read(0x72, dataBytes, 2, 0x62);
    lrfVersion = (uint16_t *) dataBytes;
    Serial.print("LRF Firmware Version  - v");
    Serial.print((*lrfVersion) / 100);
    Serial.print(".");
    Serial.print((*lrfVersion) % 100);
    Serial.println("");

    //===========================================
    // Print Hardware Version
    //===========================================
    myLidarLite.read(0xE1, dataBytes, 1, 0x62);
    hwVersion = dataBytes;
    Serial.print("Hardware Version      - ");
    switch (*hwVersion)
    {
        case 16 : Serial.println("RevA"); break;
        default : Serial.println("????"); break;
    }
}
